[1mdiff --git a/edo/src/__pycache__/edo_move_group_interface.cpython-38.pyc b/edo/src/__pycache__/edo_move_group_interface.cpython-38.pyc[m
[1mindex eab122b..aced28f 100644[m
Binary files a/edo/src/__pycache__/edo_move_group_interface.cpython-38.pyc and b/edo/src/__pycache__/edo_move_group_interface.cpython-38.pyc differ
[1mdiff --git a/edo/src/edo_move_group_interface.py b/edo/src/edo_move_group_interface.py[m
[1mindex 576b4a5..581c5ab 100644[m
[1m--- a/edo/src/edo_move_group_interface.py[m
[1m+++ b/edo/src/edo_move_group_interface.py[m
[36m@@ -244,11 +244,13 @@[m [mclass EdoMoveGroupInterface(object):[m
             waypoints.append(copy.deepcopy(pose))[m
         # Generate a motion plan from the list of poses[m
         (plan, fraction) = self.edo_move_group.compute_cartesian_path(waypoints, 0.0001, 0.0)[m
[32m+[m[32m        rospy.loginfo(f"Finished computing plan.")[m
         return plan, fraction[m
 [m
     def execute_plan(self, plan):[m
         # Execute a precomputed motion plan[m
         self.edo_move_group.execute(plan, wait=True)[m
[32m+[m[32m        rospy.loginfo(f"Finished executing plan.")[m
 [m
     def set_gripper_span(self, span):[m
         # Publish the desired gripper width[m
[36m@@ -299,9 +301,13 @@[m [mclass EdoMoveGroupInterface(object):[m
         self.display_trajectory_publisher.publish(display_trajectory)[m
 [m
     def set_pnp_target(self, marker):[m
[31m-        # Spawn a sphere at the given marker[m
[31m-        sphere = self.marker_dict[marker.upper()]['xyz'].copy()[m
[31m-        self.spawn_model(sphere, 'sphere')[m
[32m+[m[32m        if marker.upper() not in self.marker_dict:[m
[32m+[m[32m            rospy.loginfo(f"'{marker}' is not a known marker.")[m
[32m+[m[32m        else:[m
[32m+[m[32m            rospy.loginfo(f"Spawned a sphere on marker '{marker}'")[m
[32m+[m[32m            # Spawn a sphere at the given marker[m
[32m+[m[32m            sphere = self.marker_dict[marker.upper()]['xyz'].copy()[m
[32m+[m[32m            self.spawn_model(sphere, 'sphere')[m
 [m
     def pick_and_place(self, pick, place):[m
         pick_target = pick.upper()[m
[36m@@ -311,7 +317,6 @@[m [mclass EdoMoveGroupInterface(object):[m
         elif place_target not in self.marker_dict:[m
             rospy.loginfo(f"Argument '{place_target}' is not a known marker.")[m
         else:[m
[31m-            rospy.loginfo("Executing pick and place.")[m
             # Check if a sphere does exist at the marker[m
             model_name = None[m
             for model in self.spawned_models:[m
[36m@@ -325,6 +330,7 @@[m [mclass EdoMoveGroupInterface(object):[m
             if model_name == 'conflict':[m
                 rospy.loginfo(f"There already is a sphere on marker '{place_target}'.")[m
             else:[m
[32m+[m[32m                rospy.loginfo("Executing pick and place.")[m
                 # Set up waypoints[m
                 pick_approach = self.marker_dict[pick_target]['xyz'].copy()[m
                 pick_approach[2] = 0.95[m
[36m@@ -371,13 +377,13 @@[m [mclass EdoMoveGroupInterface(object):[m
 [m
     def cartesian(self, m1, m2, m3, m4):[m
         if m1.upper() not in self.marker_dict:[m
[31m-            rospy.loginfo(f"Argument '{m1}' is not a known marker.")[m
[32m+[m[32m            rospy.loginfo(f"'{m1}' is not a known marker.")[m
         elif m2.upper() not in self.marker_dict:[m
[31m-            rospy.loginfo(f"Argument '{m2}' is not a known marker.")[m
[32m+[m[32m            rospy.loginfo(f"'{m2}' is not a known marker.")[m
         elif m3.upper() not in self.marker_dict:[m
[31m-            rospy.loginfo(f"Argument '{m3}' is not a known marker.")[m
[32m+[m[32m            rospy.loginfo(f"'{m3}' is not a known marker.")[m
         elif m4.upper() not in self.marker_dict:[m
[31m-            rospy.loginfo(f"Argument '{m4}' is not a known marker.")[m
[32m+[m[32m            rospy.loginfo(f"'{m4}' is not a known marker.")[m
         else:[m
             # Get the poses from the markers[m
             poses = [[m
[36m@@ -394,6 +400,7 @@[m [mclass EdoMoveGroupInterface(object):[m
             if fraction != 1.0:[m
                 rospy.loginfo("No cartesian path exists that passes through the given markers.")[m
             else:[m
[32m+[m[32m                rospy.loginfo("Executing cartesian path.")[m
                 self.execute_plan(plan)[m
 [m
     def spawn_cylinders(self):[m
[36m@@ -415,8 +422,7 @@[m [mclass EdoMoveGroupInterface(object):[m
         if model not in ['box', 'sphere', 'cylinder']:[m
             rospy.loginfo(f"Invalid shape '{model}' for spawn command. Valid options are: 'box', 'sphere', 'cylinder'.")[m
         elif type(xyz) == str and xyz not in self.marker_dict:[m
[31m-            rospy.loginfo(f"Unknown marker '{xyz}'.")[m
[31m-[m
[32m+[m[32m            rospy.loginfo(f"'{xyz}' is not a known marker.")[m
         else:[m
             # Get the package's path[m
             rospack = rospkg.RosPack()[m
